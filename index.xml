<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sharksforarms</title><link>/</link><description>Recent content on sharksforarms</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>/about/</link><pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hi there test about page</description></item><item><title>Hello World</title><link>/posts/my-first-post/</link><pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate><guid>/posts/my-first-post/</guid><description>the test post content
use deku::prelude::*; use hexlit::hex; use std::convert::{TryFrom, TryInto}; use std::net::Ipv4Addr; /// Ipv4 Header /// ```text /// 0 1 2 3 /// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// |Version| IHL | DSCP |ECN| Total Length | /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// | Identification |Flags| Fragment Offset | /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// | Time to Live | Protocol | Header Checksum | /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// | Source Address | /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// | Destination Address | /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// | Options | Padding | /// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ /// ``` #[derive(Debug, PartialEq, DekuRead, DekuWrite)] #[deku(endian = &amp;#34;big&amp;#34;)] pub struct Ipv4Header { #[deku(bits = &amp;#34;4&amp;#34;)] pub version: u8, // Version #[deku(bits = &amp;#34;4&amp;#34;)] pub ihl: u8, // Internet Header Length #[deku(bits = &amp;#34;6&amp;#34;)] pub dscp: u8, // Differentiated Services Code Point #[deku(bits = &amp;#34;2&amp;#34;)] pub ecn: u8, // Explicit Congestion Notification pub length: u16, // Total Length pub identification: u16, // Identification #[deku(bits = &amp;#34;3&amp;#34;)] pub flags: u8, // Flags #[deku(bits = &amp;#34;13&amp;#34;)] pub offset: u16, // Fragment Offset pub ttl: u8, // Time To Live pub protocol: u8, // Protocol pub checksum: u16, // Header checksum pub src: Ipv4Addr, // Source IP Address pub dst: Ipv4Addr, // Destination IP Address // options // padding } fn main() { let test_data = hex!</description></item></channel></rss>